;;;
;;; An example of a comtab with commands and keys.
;;; Written by Jeff Dlouhy <jeff.dlouhy@gmail.com>
;;;

;;; Fundamental Comtab

(define-command move-beginning-of-line
  "Move point to beginning of line."
  "p"
  (lambda (argument)
    (move-thing line-start (- argument 1) 'FAILURE)))

;;; C-x Prefix Key
(define-prefix-key fundamental (kbd (ctrl #\x)))

(define-command next-line
  "Move down vertically to next real line.
Continuation lines are skipped.
If `next-line-add-newlines' is true and this command is given after
  the last newline in the buffer, make a new one at the end."
  "P"
  (lambda (argument) ... SOME CODE ...))

(define-command comint-previous-input
  "Cycle backwards through input history."
  "*p"
  (lambda (argument) ... SOME CODE ...))

;;; C-h Prefix Key
(define-prefix-key fundamental (kbd (ctrl #\h)))

;;; C-h Comtab

(define-command describe-key
  "Prompts for a key, and describes the command it is bound to.
Prints the full documentation for that command."
  "kDescribe key"
  (lambda (key)
    (let ((command (local-comtab-entry (current-comtabs) key (current-point))))
      (if (eq? command (ref-command-object undefined))
	  (help-describe-unbound-key key)
	  (help-describe-command command)))))

(define-command command-apropos
  "Show all commands whose names contain a match for REGEXP."
  "sCommand apropos (regexp)"
  (lambda (regexp)
    (with-output-to-help-display
     (lambda ()
       (command-apropos regexp)))))

;;; C-x Comtab

(define-command find-file
  "Visit a file in its own buffer.
If the file is already in some buffer, select that buffer.
Otherwise, visit the file in a buffer named after the file."
  "FFind file"
  find-file)

(define-command list-directory
  "Display a list of files in or matching DIRNAME.
Prefix arg (second arg if noninteractive) means display a verbose listing.
Actions controlled by variables list-directory-brief-switches
 and list-directory-verbose-switches."
  (lambda () ... SOME CODE ...))

(define-command save-buffer
  "Save current buffer in visited file if modified.  Versions described below.

By default, makes the previous version into a backup file
 if previously requested or if this is the first save.
With 1 or 3 \\[universal-argument]'s, marks this version
 to become a backup when the next save is done.
With 2 or 3 \\[universal-argument]'s,
 unconditionally makes the previous version into a backup file.
With argument of 0, never makes the previous version into a backup file.

If a file's name is FOO, the names of its numbered backup versions are
 FOO.~i~ for various integers i.  A non-numbered backup file is called FOO~.
Numeric backups (rather than FOO~) will be made if value of
 `version-control' is not the atom `never' and either there are already
 numeric versions of the file being backed up, or `version-control' is
 not #F.
We don't want excessive versions piling up, so there are variables
 `kept-old-versions', which tells Edwin how many oldest versions to keep,
 and `kept-new-versions', which tells how many newest versions to keep.
 Defaults are 2 old versions and 2 new.
If `trim-versions-without-asking' is false, system will query user
 before trimming versions.  Otherwise it does it silently."
  "p"
  (lambda (argument)
    (save-buffer (selected-buffer)
		 (case argument
		   ((0) 'NO-BACKUP)
		   ((4) 'BACKUP-NEXT)
		   ((16) 'BACKUP-PREVIOUS)
		   ((64) 'BACKUP-BOTH)
		   (else #f)))))

(define-key fundamental (kbd #\n) 'move-beginning-of-line)
(define-key fundamental (kbd #\n) 'next-line)
(define-key fundamental (kbd #\n) 'comint-previous-input)

(define-key fundamental (kbd #\n) 'describe-key)
(define-key fundamental (kbd #\n) 'apropos-command)

(define-key fundamental (kbd #\n) 'find-file)
(define-key fundamental (kbd #\n) 'list-directory)
(define-key fundamental (kbd #\n) 'save-buffer)

  +----------+--------------------------+
  |   KEY    |          VALUE           |
  +----------+--------------------------+
  |   C-a    |  move-beginning-of-line  |
  +----------+--------------------------+
  |   C-x    |         comtab ----------+-----------+
  +----------+--------------------------+           |
  |   C-n    |        next-line         |           |
  +----------+--------------------------+           |
  |   M-p    |  cominit-previous-input  |           |
  +----------+--------------------------+           |
  |   C-h    |         comtab ----------+----+      |
  +----------+--------------------------+    |      |
                                             |      |
                       +---------------------+      |
                       |                            |
  +----------+---------+----------------+           |
  |   KEY    |          VALUE           |           |
  +----------+--------------------------+           |
  |    k     |       describe-key       |           |
  +----------+--------------------------+           |
  |    a     |     apropos-command      |           |
  +----------+--------------------------+           |
                       +----------------------------+
                       |
  +----------+---------+----------------+
  |   KEY    |          VALUE           |
  +----------+--------------------------+
  |   C-f    |        find-file         |
  +----------+--------------------------+
  |   C-d    |      list-directory      |
  +----------+--------------------------+
  |   C-s    |       save-buffer        |
  +----------+--------------------------+

