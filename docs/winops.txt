Window-Win

Window-win is a new design for a window system which is intended to
have all the power of the Lisp machine window system, and more
flexibility, with less complexity. Display output, keyboard input and
mouse tracking all work through the window system. Window-win allows
the user to run different programs in different parts of the screen by
giving each program a window. It also allows a program to create
automatically-updating displays out of hierarchies of windows. For
example, a menu will be made out of hierachies of windows. For
example, a menu will be made out of a stream display window with a
simple text-string subwindow for each menu item. If you want a label
under the menu, you would put the menu and a text-string window for
the label into another window called a frame. An individual window is
not a very large object and therefore it is reasonable to create large
numbers of them.

Window-win is intended to run in a Lisp system that allows multiple
processes sharing the same address space and data heap but with their
own control stacks and dynamic binding stacks. Programs written in
other languages can be used with window-win if they can be loaded into
the Lisp environment and share Lisp data. If you are using window-win
under unix, other unix processes cannot talk to window-win directly
btu they can communicate with the Lisp through ptys and the Lisp can
display their output in windows.

Screen updating in window-win is preemptable, which means that it has
frequent stopping points at whic the rest of the updating can be
postponed to execute the users commands. Programs modify the ideal
current window configuration which is te goal for redisplay. The
redisplay mechanism records what is actually on the screen. When there
is no other work to be done, the redisplay mechanism alters the screen
image in the direction of the goal set up by the program. If the user
types a command before the activity is finished, the command is
executed, and then the redisplay mechanism starts up again heading
toward the new current goal from wherever it has stopped.

The top level of the window hierachy is the "screen", a window which
represents the whole screen and has the whole screen as its visible
area all the time. (Actually, it is ok to have more than one such
window on a machine with multiple physical screens.) Underneath this
window will be windows belonging to individual programs. They are
"inferiors" of the screen, and the screen is their "superior". The
individual program windows have inferiors also which they use to
costruct their screen images.

Note: below, where "positions" and "regions" are referred to, I was
thinking of having objects to represent points or rectangles, as in
Interlisp-D. However, I am now thinking taht it would be better to
pass four numbers as four separate arguments rather than as an object
containing four slots because this avoids the need to cons structures
at run time.



Window redisplay

Most display updating is done in a special process called the
redisplay process. It loops doing a tree walk of the window hierachy,
updating display at all levels. Applications requiring high efficiency
can take a short cut called "direct updating", described in a later
section.

Display updating of one window is normally done by the :UPDATE-DIAPLAY
operation.

:UPDATE-DISPLAY screen screen-position previous-contents-data
                display-style window-region display-style window-region ...

updates the contents of parts of this window, specified by the
rectangles called WINDOW-REGION, on SCREEN with upper left corner of
the window at point SCREEN-POSITION. (The corner of teh window need no
be part of any of the displayed regions, but the regions are
positioned AS IF that corner of the window were at that point on the
screen).
PREVIOUS-CONTENTS-DATA tells the window what it has displayed on the
screen before so it can tell how to use what exists on the screen
already in order to update incrementally if it wishes.

The DISPLAY-STYLE argument preceding each WINDOW-REGION argument tells
what assumptions can be made about the state of the screen bits of
that area of the screen. If it is NIL, you can assume that the screen
bits contain data corresponding to what PREVIOUS-CONTENTS-DATA
says. If it is T, you may not assume anything about the screen bits;
in fact you must erase all such rectangles immediately before doing
anything else and must update PREVIOUS-CONTENTS-DATA to say that they
are clear. If DISPLAY-STYLE is :JUST-DRAW, you must update
PREVIOUS-CONTENTS-DATA in that same fashion but NOT erase the
rectangle. (This is used for blinker drawing and un-drawing.)

The operation should return the updated PREVIOUS-CONTENTS-DATA, which
may or may not be the same Lisp object as the argument. The value
returned by this operation will be saved and will be passed back as
the PREVIOUS-CONTENTS-DATA on the next display update.

The PREVIOUS-CONTENTS-DATA applies to the whole of the
window. Sometimes only part of the window is being
displayed. :UPDATE-DISPLAY is called only once, and describes all the
currently-displayed parts of the window. The window should update the
PREVIOUS-CONTENTS-DATA in parallel with the specified parts of the
screen. It may or may not update PREVIOUS-CONTENTS-DATA for changes
that do not appear in the displayed parts of the window -- it makes
no difference whether such updating is done.



Redisplay-needed Flags

The intention is that each window with inferiors will pass the
:UPDATE-DISPLAY operation on recursively to the inferiors.

This would require a lot of work to go into walking parts of the
window tree where nothing has changed. To avoid that work, there is a
flag stored for each window by the window's superior which says
whether that window (including any of its inferiors) requires
attention for redisplay. The flag is set by anything which changes the
data base that the window uses for its display. Often this is also a
frequent operation which should not have to take the time to invoke a
flavor operation. So we allow the window to get and save a list of
pointers to the flags it will need to set.

:REDISPLAY-FLAG-LIST inferior-window

Returns the redisplay flag list for INFERIOR-WINDOW, an inferior of
this window. The redisplay flag list of a window is a list of pointers
whose cars are the flags of that window, its superiors, and so on up
to the top level window (the screen). Thus:
(MY-FLAG-POINTER MY-SUPERIORS-FLAG-POINTER
 MY-SUPERIORS-SUPERIORS-FLAG-POINTER ...
SCREEN-FLAG-POINTER)
When a window is created, it can ask its superior for its redisplay
flag list, and save the list around.
When a window's data base is changed so that it requires redisplay,
what the program does is look down the redisplay flag list, setting
each flag to T until it comes to a flag that is already T.

Window whose display changes infrequently and for which simplicity is
more important than efficiency when the display does change can use
this convenient operation (on the window's superior) instead.

:REDISPLAY-NEEDED inferior-window

Inform this window that INFERIOR-WINDOW needs redisplay. All flags are
set as described above, without consing up a list of the pointers to
the flags. This is for use with kinds of windows whose contents
rarely change.



Why Separate Objects for PREVIOUS-CONTENTS-DATA?

Why not just have each window remember its previous display
information internally rather than pass it as an argument from the
superior?

My original idea was that a window could appear in different places in
the window hierarchy. It would redisplay properly in each place since
different records of screen contents would be kept.

Unfortunately, it seems that a window does need to know its superior
to report when it has changed, and the redisplay flags are probably
important for efficiency. This rules out appearing in multiple places,
though perhaps windows could know about any number of independent
superiors and inform each one independently when the window needs
redisplay. A text string window whose contents do not
change can still be used as an inferior to more than one other window
since this window will not need to actually look at its superior.

Also, it is possible to save a screen snapshot or a snapshot of a
single window and save the PREVIOUS-CONTENTS-DATA at the same
time. Restoring them both might be useful in conjunction with
returning the data bases being displayed to their previous state or a
similar state.

If these features are not deemed worth having, it is easy to make each
window remember its PREVIOUS-CONTENTS-DATA internally.



Why Specify All the Regions in a Single :UPDATE-DISPLAY?

Originally I had :UPDATE-DISPLAY being called once for each
region. That was simpler conceptually. But it had an implementation
problem. If one part of a window was invalidated while another was
correct on the screen it would be hard to alter the
PREVIOUS-CONTENTS-DATA to indicate this if there were lines, items or
whatever which fell partly into each region. For example, suppose in a
picture window a line runs from the invalid region to the valid
region. The PREVIOUS-CONTENTS-DATA says either that the line is
present on the screen or that it is not.

The solution of making the PREVIOUS-CONTENTS-DATA say which parts of
the window were valid, or other such information, seemed
complicated. To avoid it, I changed the design so that a single
:UPDATE-DISPLAY describes all the visible parts of the window. The
window can then make PREVIOUS-CONTENTS-DATA consistent with the
existing screen image by erasing the parts of the critical items which
fall in the still-valid parts of the window. After this, such items
are completely absent from the display and PREVIOUS-CONTENTS-DATA can
simply say they are absent.

On the other hand, the alternative of recording the invalidated
regions explicitly in the PREVIOUS-CONTENTS-DATA and using that
information in display updating until the regions become valid may be
simpler than I thought.

If :UPDATE-DISPLAY is changed back to do a single window region,
direct updating windows will no longer be able to tell from that
operation when part of the window has ceased to be visible. However,
they can still tell this by watching the :WINDOW-AREA-INVISIBLE
operations.



Size and Position of Windows

A window normally knows it own size but not, in any sense, its
position. Only the superior knows that (relative to the superior).
In fact, a window need not always HAVE a position in its superior, if
it is not currently being displayed (such as, if it has been scrolled
off the screen). The window's position is "on the screen" makes sense
only when the window is visible.

:SIZE

This operation returns te height and width of teh window.

Sometimes a superior such as a frame will change an inferior's
size. Then it will use the :SET-SIZE operation.

:SET-SIZE width height

Some scrolling windows will allow each inferior to decide its own
size. The superior will use the chosen sizes to decide where the
inferiors appear. Sometime  the superior will specify the width and
the inferior will determine the height from that.

:DESIRED-SIZE keyword-args

The keyword arguments specify things about the window shape or
size. Two values are returned base o the specified constraints (and
also based on what the window wants to display now). These are the
window's desired with and height.

Two standard constraint arguments all windows accept are :WIDTH and
:HEIGHT, which specify one dimension of the size. Also there are
:MAXIMUM-WIDTH and MAXIMUM-HEIGHT.

The operation will be invoked by the superior's redisplay handler. The
superior may or may not choose to change the inferior's size based on
the inferior's request. If it does so, it informs the inferior with a
:SET-SIZE. Invoking :UPDATE-DISPLAY on the inferiors comes last of
all. :DESIRED-SIZE should have no side effects on the window that
performs it.

One can find out a window's position by asking its superior:

:INFERIOR-POSITION inferior

returns the position of upper left corner of INFERIOR on its
screen. The operation is invoked on the INFERIOR's superior.



Blinkers

A blinker in an ornament on a window. The posiiton of the mouse is
traditional indicated with a blinker. Also, a blinker is used to
indicate the position at which input or output is being inserted in a
stream. On the Lisp machine, blinkers are used for sch things as the
point in the editor, flashing the open paren that matches the close
paren that point is after. boxes around menu items that the mouse is
pointing at, spaceships and torpedoes in spacewar. In this window
system, not all of these things will be blinkers, but some of them
must be.

Blinkers do not have to blink; they can be on solidly. What all
blinkers have in common is that they are "in addition to" the rest of
the display of some window, and the "rest" of the display can be
updated independently of the blinkers even though they occupy the same
space. This works because the blinkers are always drawn and erased by
xor'ing. To update a blinker (change its position or the way it looks
on screen), it can be erased and redrawn. To update the "rest" of the
display, if suffices to erase all blinkers, do the output, and then
redraw the blinkers.

On the Lisp machine, a blinker is a special type of object. In
Window-win, a blinker is a kind of window. The usual kind of blinker
actually has an inferior, called its contents, which provides the
shape of the blinker. The blinker itself implements the proper
interface for being used as a blinker.

A blinker is an inferior of another window, and its image on the
screen is always within the superior. It is possible for the blinker
to be positioned entirely or partially outside the rectangle of its
superior, making it invisible or partially visible. This sort of
clipping is done like any other scrolling.

A blinker has to have these instance variables:

VISIBILITY
        Non-NIL if this blinker SHOULD be drawn on the
        screen. (Blinking complements this flag periodically.)

NEXT-VISIBILITY-TIME
        Either NIL or a time at which VISIBILITY should be set to
        T. This setting will be done by the first display updating
        after that time. This flag is used to provide the feature that
        if a blinker is taken off the screen to update other windows,
        the blinker will not reappear for at least 1/3 second. This
        feature is observed to reduce extraneous screen flashing.

PREVIOUS-CONTENTS-DATA-POINTER
        the cell whose car is the PREVIOUS-CONTENTS-DATA for this
        blinker.

CONTENTS
        the window (an inferior of the blinker) which is used to draw
        the blinker's appearance.
        The blinker need not record its size; it can ask the contents.
        It is possible to implement well behaved blinkers that do
        their own displaying rather than using a contents window, but
        the gain in efficiency may not be important though.
SUPERIOR
        This may not actually be needed.
BLINK-LIST-ELEMENT
        If this blinker is blinking. the BLINK-LIST element for this blinker.
        Otherwise, NIL. Having this facilitates updating the
        BLINK-LIST element quickly when the blinker is moved while it
        is blinking. Displaying updating of the blinker checks this
        automatically if the blinker has moved.

Blinkers normally have small images that are quick to draw. So for the
sake of simplicity there is no incremental updating for blinkers. The
blinker is either on or off. It the blinker's shape or position is
supposed to change, it is done by un-drawing the blinker in the old
location and re-drawing it in the new one. This is usually going to be
easier and faster than computing the differences.

The blinker is drawn by invoking the :UPDATE-DISPLAY operation in its
contents with :JUST-DRAW for the value of the argument DISPLAY-STYLE,
the global flag XOR-FLAG bound to T. It is un-drawn the way! This
calling convention will cause some types of window to display in a
suitable fashion, including text string windows. Most blinkers'
contents will be text string windows displaying a single character
in a funny font containing arrows, etc.

[[ Unless :JUST-DRAW turns out to have some other application aside
from blinker updating there may be no need to have both :JUST-DRAW and
XOR-FLAG. One of them may serve for both purposes if that is
cleaner.]]

The blinker's PREVIOUS-CONTENTS-DATA records whether the blinker is
currently drawn, and if so, its position, regions of visibility and
contents when last drawn. Display updating of the blinker compares
these saved values against the current values in the blinker. If they
do not match, the blinker erased the old contents from its old
position and displayed regions (if it has been turned on), then draws
the new one (if it is supposed to be turned on).

The appearance of the contents window of a blinker should never be
changed. Substitute a different contents window instead. The blinker
just compares the contents with EQ to see if it must redisplay for
some reason. This restriction is because the blinker needs to be able
to un-draw the contents in its old shape. If parameters in the
contents have changed, the old blinker image would be un-drawn with
its new shape, leaving a difference pattern on the screen forever.

The reason why the blinker must point to its PREVIOUS-CONTENTS-DATA is
so that direct output to blink the blinker can alter the
PREVIOUS-CONTENTS-DATA to reflect the fact that the screen has been
changed.

Superiors of Blinkers

Several kinds of windows will need to have blinkers as inferiors. The
screen needs to have a blinker, the mouse blinker, under it. Stream
display windows will usually want to have a cursor blinker. These
types of windows need to have (either optionally or always) an
instance variable BLINKERS which is a list of the blinkers inferior to
the window. It may be best to for all such windows to have this
variable and the ability to have inferior blinkers even if they don't
actually have any.

Or the ability to have blinkers as inferiors may be implemented by a
mix-in.

Blinkers and Display of Other Windows

Because the blinker shares screen area with other windows (other
inferiors of the same superior), it must be erased before those other
windows are updated. The superior's :UPDATE-DISPLAY method must erase
all relevant blinkers before preforming :UPDATE-DISPLAY on the other
inferiors. It can put the blinkers back when done, if it is not
preempted.

If direct output is done on any of those other inferiors, it should
also remove the blinkers. Direct output has special hooks to allow
this to be done. The blinkers should NOT be redrawn when the direct
output is finished. Instead, redrawing the blinkers should be left for
the next regular redisplay (that is, the blinkers should be marked as
needing redisplay). This is becasue usually many direct outputs will
be done in a row and only the first should have to mess with the
blinkers.

Blinkers are made to blink by putting them on the BLINK-LIST. The
value of BLINK-LIST is a list of elements of this form:
      (BLINKER NEXT-BLINK-TIME HALF-PERIOD
       SCREEN-POSITION BLINKER-REGION BLINKER-REGION ...)
SCREEN-POSITION gives the position of the upper left corner of the
blinker, and BLINKER-REGION is the position of the blinker that should
actually be blinked (usually all of it, but less if the blinker is
only partially visible). If the blinker is overlapped by a corner of
another window, it may be necessary to describe the visible portion by
more than one rectangular region. Blinking is done as direct output by
a special process that wakes up as often as necessary. However, the
usual precaution of removing other blinkers from the screen before
direct output is not needed since all the blinkers are xor'd and do
not interfere with each other. Thus, blinker blinking can be done
directly from the information in the BLINK-LIST without any reference
to the blinkers' superiors.



Mouse Tracking

Mouse tracking is done ont he basis of the window hierarchy. When the
mouse moves into a window, that window's :TRACK-MOUSE method is
invoked to track the mouse while it remains in the window. Whhen the
mouse moves out of the winodw that methods returns. When the mouse
moves into the one of the inferiors of that window, the inferior's
:TRACK-MOUSE method will be called.

Not all windows are asked to handle the mouse. Each superior knows
that certain of its sub-windows should be offered handling of the mouse
and others should not, just as it knows that certain sub-windows
should be invoked for display updating and others not. (A particular
type of superior might know that all of its inferiors or none of its
inferiors, want to handle the mouse or it might keep a flag for each
inferior, or might ask the inferior on each occasion.)

:TRACK-MOUSE screen screen-position window-region

Track the mouse on SCREEN while it remains in the part of the window
specified by WINDOW-REGION, whose upper left corner corresponds to
SCREEN-POSITION on the screen.

Some windows will choose to do different things in tracking the mouse
depending on whether the entire window is available for tracking the
mouse through (that is, the window is entirely visible).

Mouse tracking is done in a special-purpose process called the mouse
process. The main loop of this process simply calls the screen's
:TRACK-MOUSE handler repeatedly inside a catch of the
MOUSE-RECONSIDER. The low level wait primitive that waits for the
mouse to move also waits for the variable MOUSE-WAKEUP to be
non-NIL. If that happens, the primitive throws to MOUSE-RECONSIDER. Any
change in window configuration should set MOUSE-WAKEUP to T unless it
can be determined that the change cannot affect the window that the
mouse is in (such as if the windows that are changing fit within a
part of the screen that the mouse is not in).

Often a window will highlight on the screen while its :TRACK-MOUSE
handler is in progress, if the window is fully visible, or possibly it
will highlight whichever part is visible. To interlock this with
redisplay, such :TRACK-MOUSE hadnlers place the expression to evaluate
to undo the highlighting in the variable TRACK-MOUSE-UNHIGHLIGHT. An
unwind protect is used to eval the value of that variable provided it
is non-NIL. Anyone wanting to do redisplay may eval the value himself
and set it to NIL, to make sure that there is no highlighting on the
screen.

Mouse clicks do not necessarily go to the window that is tracking the
mouse, though that window can get them if it wants to. The destination
of the mouse clicks is controlled by two variables, MOUSE-CLICK-WINDOW
and MOUSE-CLICK-OVERRIDE. A mouse click is reported by

    (SEND (OR MOUSE-CLICK-OVERRIDE MOUSE-CLICK-WINDOW) ':MOUSE-CLICK args)

If a window wants to handle mouse clicks when the mouse is inside it,
its :TRACK-MOUSE handler will set MOUSE-CLICK-WINDOW on entry using
LET-GLOBALLY, which automatically restores the old value on exist from
the window's :TRACK-MOUSE handler. The args given to :MOUSE-CLICK are
as follows:

   CLICK-DESCRIPTION WINDOW POSITION-IN-WINDOW SCREEN-POSITION

the first says which button, how many clicks, etc.

WINDOW is the window that was tracking the mouse at the time.

POSITION-IN-WINDOW is the mouse position within that window at the
time of the click, and SCREEN-POSITION is the position on the screen.

Documentation on the meanings of the available mouse clicks is
provided through the variable MOUSE-DOCUMENTATION. Its value should be
a string of a function which returns a string when called with some
standard set of useful arguments (such as screen, screen-position,
window-region and window). This variable will be bound by :TRACK-MOUSE
methods like MOUSE-CLICK-WINDOW.



